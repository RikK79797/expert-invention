#!/bin/bash

set -euo pipefail

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LANG=""
REPO=""
BRANCH="main"
OUTPUT="pipeline.yaml"
TEMP_DIR=".tmp_repo"

# –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
DEPS_FILE="dependencies.txt"
echo "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:" > "$DEPS_FILE"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
usage() {
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
  echo "–û–ø—Ü–∏–∏:"
  echo "  --lang LANG        –Ø–∑—ã–∫: python, node, java (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
  echo "  --repo URL         URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (HTTPS)"
  echo "  --branch NAME      –í–µ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)"
  echo "  --output FILE      –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ .yaml —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: pipeline.yaml)"
  exit 1
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --lang) LANG="$2"; shift ;;
    --repo) REPO="$2"; shift ;;
    --branch) BRANCH="$2"; shift ;;
    --output) OUTPUT="$2"; shift ;;
    *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; usage ;;
  esac
  shift
done

# === –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ===
if [[ -z "$REPO" ]]; then
  echo "–û—à–∏–±–∫–∞: --repo –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
  usage
fi

#  –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è 
echo "üì• –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO (–≤–µ—Ç–∫–∞: $BRANCH)..."
git clone --depth 1 --branch "$BRANCH" "$REPO" "$TEMP_DIR" || {
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –≤–µ—Ç–∫—É."
  exit 1
}

#  –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è 
detect_language() {
  local dir="$1"
  local detected=""

  if [[ -f "$dir/requirements.txt" ]]; then
    echo "requirements.txt" >> "$DEPS_FILE"
    detected="python"
  elif [[ -f "$dir/package.json" ]]; then
    echo "package.json" >> "$DEPS_FILE"
    detected="node"
  elif [[ -f "$dir/pom.xml" ]] || [[ -f "$dir/build.gradle" ]]; then
    [[ -f "$dir/pom.xml" ]] && echo "pom.xml" >> "$DEPS_FILE"
    [[ -f "$dir/build.gradle" ]] && echo "build.gradle" >> "$DEPS_FILE"
    detected="java"
  elif [[ -f "$dir/go.mod" ]]; then
    echo "go.mod" >> "$DEPS_FILE"
    detected="go"
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."
    rm -rf "$TEMP_DIR"
    exit 1
  fi

  if [[ -n "$LANG" ]]; then
    if [[ "$LANG" != "$detected" ]]; then
      echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –£–∫–∞–∑–∞–Ω —è–∑—ã–∫ '$LANG', –Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω '$detected' –ø–æ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞."
      read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫? (y/N): " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        detected="$LANG"
      fi
    fi
  fi

  echo "$detected"
}

LANG=$(detect_language "$TEMP_DIR")
echo "‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —è–∑—ã–∫: $LANG"

# === –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ===
estimate_disk_requirement() {
  local repo_dir="$1"
  local lang="$2"

  local repo_size_kb
  repo_size_kb=$(du -s "$repo_dir" | awk '{print $1}')
  local repo_size_mb=$(( (repo_size_kb + 1023) / 1024 ))

  local multiplier=3
  local estimated_mb

  case "$lang" in
    node)
      local deps_count=0
      if [[ -f "$repo_dir/package.json" ]]; then
        if command -v jq &> /dev/null; then
          deps_count=$(jq '.dependencies // {} | length' "$repo_dir/package.json")
          deps_count=$((deps_count + $(jq '.devDependencies // {} | length' "$repo_dir/package.json")))
        else
          deps_count=20
        fi
      fi
      multiplier=$(( 10 + deps_count / 3 ))
      multiplier=$(( multiplier > 100 ? 100 : multiplier ))
      ;;

    python)
      local req_lines=0
      if [[ -f "$repo_dir/requirements.txt" ]]; then
        req_lines=$(wc -l < "$repo_dir/requirements.txt" | tr -d ' ')
      fi
      multiplier=$(( 5 + req_lines * 2 ))
      multiplier=$(( multiplier > 50 ? 50 : multiplier ))
      ;;

    java)
      multiplier=30
      ;;

    *)
      multiplier=5
      ;;
  esac

  estimated_mb=$(( repo_size_mb * multiplier ))
  estimated_mb=$(( estimated_mb < 500 ? 500 : estimated_mb ))
  echo "$estimated_mb"
}

# === –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ===
analyze_disk_usage() {
  local repo_dir="$1"
  local lang="$2"
  local level="low"
  local reason="–ù–µ—Ç —è–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫."

  # –®–∞–±–ª–æ–Ω—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
  local patterns=(
    '\.(write|save|dump|to_csv|to_json|writeFile)'  # JS/Python –∑–∞–ø–∏—Å—å
    'open.*[wa+]'                                    # Python –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å
    '> .*'
    '>> .*'
    'fwrite\|file_put_contents'                     # PHP/C
    'sqlite\|\.db\|\.sqlite'                         # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    'logs?/'                                         # –õ–æ–≥–∏
    'upload\|storage\|cache\|tmp\|temp'             # –ö—ç—à, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    'Dockerfile.*VOLUME'
    'docker-compose.*volumes'
    '\.pkl$'
    '\.log$'
    'logging.FileHandler'                            # Python –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    'os\.makedirs.*log'                              # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
  )

  local found=0
  for pattern in "${patterns[@]}"; do
    if grep -r -s -q -E "$pattern" "$repo_dir" 2>/dev/null; then
      ((found++))
    fi
  done

  if [ $found -eq 0 ]; then
    level="low"
    reason="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫."
  elif [ $found -le 3 ]; then
    level="medium"
    reason="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –µ–¥–∏–Ω–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ (–ª–æ–≥–∏, –∫—ç—à)."
  else
    level="high"
    reason="–ú–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏: –ë–î, –ª–æ–≥–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."
  fi

  # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
  if [[ "$lang" == "python" ]]; then
    if grep -r -s -q -E 'pandas\.read_(csv|json)|pickle\.load' "$repo_dir" 2>/dev/null; then
      if [[ "$level" == "low" ]]; then
        level="medium"
        reason="–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å."
      fi
    fi
  fi

  echo "$level|$reason"
}

# === –û—Ü–µ–Ω–∫–∞ –æ–±—ä—ë–º–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–∞ ===
DISK_REQUIRED=$(estimate_disk_requirement "$TEMP_DIR" "$LANG")
echo "üìä –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –º–µ—Å—Ç–∞: ${DISK_REQUIRED} MB"

# –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–∏—Å–∫–∞
IFS='|' read -r disk_level disk_reason <<< "$(analyze_disk_usage "$TEMP_DIR" "$LANG")"
echo "üß† –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞: $disk_level ‚Äî $disk_reason"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
avail_mb=$(df / --output=avail -B M | tail -n1 | awk '{print $1}' | tr -d 'M')

if [[ -z "$avail_mb" ]] || ! [[ "$avail_mb" =~ ^[0-9]+$ ]]; then
  echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ."
else
  echo "üíæ –°–≤–æ–±–æ–¥–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: ${avail_mb} MB"
  if [ "$avail_mb" -lt "$DISK_REQUIRED" ]; then
    echo "‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${DISK_REQUIRED} –ú–ë"
  else
    echo "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞."
  fi
fi

# === –®–∞–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ ===
get_build_steps() {
  case $LANG in
    python)
      cat << 'EOF'
      - apt-get update
      - apt-get install -y python3 python3-pip
      - pip3 install -r requirements.txt
      - python3 -m pytest tests/ || echo "–¢–µ—Å—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
EOF
      ;;

    node)
      cat << 'EOF'
      - apt-get update
      - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      - apt-get install -y nodejs
      - npm ci
      - npm run build || echo "–°–±–æ—Ä–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      - npm test || echo "–¢–µ—Å—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
EOF
      ;;

    java)
      cat << 'EOF'
      - apt-get update
      - apt-get install -y openjdk-17-jdk maven
      - mvn clean package
EOF
      ;;

  esac
}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è pipeline.yaml ===
cat > "$OUTPUT" << EOF
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω
# –Ø–∑—ã–∫: $LANG
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO
# –í–µ—Ç–∫–∞: $BRANCH
# –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${DISK_REQUIRED} MB
# –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞: $disk_level ($disk_reason)

stages:
  - build

variables:
  APP_LANG: "$LANG"
  REQUIRED_DISK_MB: "$DISK_REQUIRED"
  DISK_USAGE_LEVEL: "$disk_level"   # low | medium | high
  REPO_URL: "$REPO"
  TARGET_BRANCH: "$BRANCH"
  PROJECT_ROOT: "/app"

build_application:
  stage: build
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y git wget sudo
    - git clone --branch "\${TARGET_BRANCH}" "\${REPO_URL}" \${PROJECT_ROOT}
    - cd \${PROJECT_ROOT}
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: "
      ls -la "$TEMP_DIR"
      $(get_build_steps)
  script:
    - echo "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

EOF

# === –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===
rm -rf "$TEMP_DIR"
echo "üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞."

# === –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
echo ""
echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!"
echo "üöÄ –ü–∞–π–ø–ª–∞–π–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $OUTPUT"
echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $OUTPUT –≤ GitLab CI, GitHub Actions –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö."
echo ""
echo "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–π–ø–ª–∞–π–Ω–∞:"
cat "$OUTPUT"
