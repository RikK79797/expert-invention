#!/bin/bash

set -euo pipefail

# === –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
LANG=""
REPO=""
BRANCH="main"
PORT=3000
# MEMORY=256
# DISK=1000
OUTPUT="pipeline.yaml"
TEMP_DIR=".tmp_repo"

# === –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ dependencies.txt) ===
DEPS_FILE="dependencies.txt"
echo "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:" > "$DEPS_FILE"

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏ ===
usage() {
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
  echo "–û–ø—Ü–∏–∏:"
  echo "  --lang LANG        –Ø–∑—ã–∫: python, node, java, go (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
  echo "  --repo URL         URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (HTTPS)"
  echo "  --branch NAME      –í–µ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)"
  echo "  --port N           –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3000)"
  # echo "  --memory N         –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –≤ MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 256)"
  # echo "  --disk N           –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)"
  echo "  --output FILE      –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ .yaml —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: pipeline.yaml)"
  exit 1
}

# === –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --lang) LANG="$2"; shift ;;
    --repo) REPO="$2"; shift ;;
    --branch) BRANCH="$2"; shift ;;
    --port) PORT="$2"; shift ;;
    # --memory) MEMORY="$2"; shift ;;
    # --disk) DISK="$2"; shift ;;
    --output) OUTPUT="$2"; shift ;;
    *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; usage ;;
  esac
  shift
done

# === –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ===
if [[ -z "$REPO" ]]; then
  echo "–û—à–∏–±–∫–∞: --repo –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
  usage
fi

# === –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ===
echo "üì• –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO (–≤–µ—Ç–∫–∞: $BRANCH)..."
git clone --depth 1 --branch "$BRANCH" "$REPO" "$TEMP_DIR" || {
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –≤–µ—Ç–∫—É."
  exit 1
}

# === –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ===
detect_language() {
  local dir="$1"
  local detected=""

  if [[ -f "$dir/requirements.txt" ]]; then
    echo "requirements.txt" >> "$DEPS_FILE"
    detected="python"
  elif [[ -f "$dir/package.json" ]]; then
    echo "package.json" >> "$DEPS_FILE"
    detected="node"
  elif [[ -f "$dir/pom.xml" ]] || [[ -f "$dir/build.gradle" ]]; then
    [[ -f "$dir/pom.xml" ]] && echo "pom.xml" >> "$DEPS_FILE"
    [[ -f "$dir/build.gradle" ]] && echo "build.gradle" >> "$DEPS_FILE"
    detected="java"
  elif [[ -f "$dir/go.mod" ]]; then
    echo "go.mod" >> "$DEPS_FILE"
    detected="go"
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."
    exit 1
  fi

  # –ï—Å–ª–∏ —è–∑—ã–∫ –∑–∞–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if [[ -n "$LANG" ]]; then
    if [[ "$LANG" != "$detected" ]]; then
      echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í—ã —É–∫–∞–∑–∞–ª–∏ —è–∑—ã–∫ '$LANG', –Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω '$detected' –ø–æ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞."
      read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫? (Y/n): " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        detected="$LANG"
      fi
    fi
  fi

  echo "$detected"
}

LANG=$(detect_language "$TEMP_DIR")
echo "‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —è–∑—ã–∫: $LANG"

# === –®–∞–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ ===
get_build_steps() {
  case $LANG in
    python)
      cat << 'EOF'
      - apt-get update
      - apt-get install -y python3 python3-pip
      - pip3 install -r requirements.txt
      - python3 -m pytest tests/ || echo "–¢–µ—Å—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
EOF
      ;;

    node)
      cat << 'EOF'
      - apt-get update
      - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      - apt-get install -y nodejs
      - npm ci
      - npm run build || echo "–°–±–æ—Ä–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      - npm test || echo "–¢–µ—Å—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
EOF
      ;;

    java)
      cat << 'EOF'
      - apt-get update
      - apt-get install -y openjdk-17-jdk maven
      - mvn clean package
EOF
      ;;

    go)
      cat << 'EOF'
      - apt-get update
      - apt-get install -y golang
      - go mod download
      - go build -o app .
EOF
      ;;
  esac
}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è pipeline.yaml ===
cat > "$OUTPUT" << EOF
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω
# –Ø–∑—ã–∫: $LANG
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO
# –í–µ—Ç–∫–∞: $BRANCH
# –ü–æ—Ä—Ç: $PORT
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: RAM >= ${MEMORY}MB, Disk >= ${DISK}MB

stages:
  - build

variables:
  APP_LANG: "$LANG"
  # REQUIRED_MEMORY_MB: "$MEMORY"
  # REQUIRED_DISK_MB: "$DISK"
  EXPOSED_PORT: "$PORT"
  REPO_URL: "$REPO"
  TARGET_BRANCH: "$BRANCH"
  PROJECT_ROOT: "/app"

build_application:
  stage: build
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y git wget sudo
    - git clone --branch "\${TARGET_BRANCH}" "\${REPO_URL}" \${PROJECT_ROOT}
    - cd \${PROJECT_ROOT}
$(get_build_steps)
  script:
    - echo "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

  tags:
    - high-mem-${MEMORY}mb
    - disk-${DISK}mb

test_application:
  stage: test
  image: ubuntu:22.04
  script:
    - echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    - exit 0
  needs: ["build_application"]
  rules:
    - if: \$CI_COMMIT_BRANCH == \$TARGET_BRANCH

deploy_staging:
  stage: deploy
  image: alpine:latest
  script:
    - echo "–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ staging..."
    - echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç: \${EXPOSED_PORT}"
  environment: staging
  needs: ["test_application"]
  when: manual
  rules:
    - if: \$CI_COMMIT_BRANCH == \$TARGET_BRANCH
EOF

# === –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===
rm -rf "$TEMP_DIR"
echo "üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞."

# === –§–∏–Ω–∞–ª ===
echo ""
echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!"
# echo "üìÑ –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $DEPS_FILE"
echo "üöÄ –ü–∞–π–ø–ª–∞–π–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $OUTPUT"
echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $OUTPUT –≤ GitLab CI, Jenkins, GitHub Actions –∏ —Ç.–¥."
echo ""
echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–π–ø–ª–∞–π–Ω–∞"
cat "$OUTPUT"
