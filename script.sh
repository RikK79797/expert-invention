#!/bin/bash

set -euo pipefail

# === –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
LANG=""
REPO=""
BRANCH="main"
PORT=3000
MEMORY=256
DISK=1000
OUTPUT="pipeline.yaml"
TEMP_DIR=$(mktemp -d)
CLONE_PATH="$TEMP_DIR/project"

# === –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ ===
trap 'rm -rf "$TEMP_DIR"' EXIT

# === –°–ø—Ä–∞–≤–∫–∞ ===
usage() {
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
  echo "–û–ø—Ü–∏–∏:"
  echo "  --lang LANG        –Ø–∑—ã–∫: python, node, java, go (–∞–≤—Ç–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)"
  echo "  --repo URL         URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (HTTPS)"
  echo "  --branch NAME      –í–µ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)"
  echo "  --port N           –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
  echo "  --memory N         –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –≤ MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 256)"
  echo "  --disk N           –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ MB (–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è)"
  echo "  --output FILE      –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ .yaml —Ñ–∞–π–ª–∞"
  exit 1
}

# === –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --lang) LANG="$2"; shift ;;
    --repo) REPO="$2"; shift ;;
    --branch) BRANCH="$2"; shift ;;
    --port) PORT="$2"; shift ;;
    --memory) MEMORY="$2"; shift ;;
    --disk) DISK="$2"; shift ;;
    --output) OUTPUT="$2"; shift ;;
    *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; usage ;;
  esac
  shift
done

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ===
if [[ -z "$REPO" ]]; then
  echo "–û—à–∏–±–∫–∞: --repo –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
  usage
fi

# === –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ===
echo "üîç –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: $REPO (–≤–µ—Ç–∫–∞: $BRANCH)..."
git clone --depth 1 --branch "$BRANCH" "$REPO" "$CLONE_PATH" >/dev/null 2>&1 || \
  { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –¥–æ—Å—Ç—É–ø."; exit 1; }

cd "$CLONE_PATH"

# === –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
HAS_PACKAGE_JSON=$(find . -name "package.json" | head -n1)
HAS_REQUIREMENTS_TXT=$(find . -name "requirements.txt" | head -n1)
HAS_POM_XML=$(find . -name "pom.xml" | head -n1)
HAS_GO_MOD=$(find . -name "go.mod" | head -n1)

# === –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ===
if [[ -z "$LANG" ]]; then
  if [[ -n "$HAS_PACKAGE_JSON" ]]; then
    LANG="node"
  elif [[ -n "$HAS_REQUIREMENTS_TXT" ]]; then
    LANG="python"
  elif [[ -n "$HAS_POM_XML" ]]; then
    LANG="java"
  elif [[ -n "$HAS_GO_MOD" ]]; then
    LANG="go"
  else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫. –£–∫–∞–∂–∏—Ç–µ --lang —è–≤–Ω–æ."
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    find . -maxdepth 2 -type f -name "package.json" -o -name "requirements.txt" -o -name "pom.xml" -o -name "go.mod"
    exit 1
  fi
  echo "üü¢ –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: $LANG"
else
  echo "üü° –Ø–∑—ã–∫ –∑–∞–¥–∞–Ω –≤—Ä—É—á–Ω—É—é: $LANG"
fi

# === –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ–º–æ–≥–æ –º–µ—Å—Ç–∞ (–æ—Ü–µ–Ω–∫–∞) ===
PROJECT_SIZE_MB=$(du -sm . | cut -f1)
DISK_ESTIMATED=$(( PROJECT_SIZE_MB * 3 + 500 ))  # –º–µ—Å—Ç–æ –ø–æ–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –±–∏–ª–¥
DISK=${DISK:-$DISK_ESTIMATED}

# === –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞) ===
case $LANG in
  node)
    MEMORY_EST=$(( $(grep -c "^ *" "$HAS_PACKAGE_JSON" 2>/dev/null || echo 10) * 10 ))
    MEMORY=${MEMORY:-$(( MEMORY_EST > 256 ? MEMORY_EST : 256 ))}
    ;;
  python)
    DEPS_COUNT=$(wc -l < "$HAS_REQUIREMENTS_TXT")
    MEMORY=${MEMORY:-$(( DEPS_COUNT * 20 > 256 ? DEPS_COUNT * 20 : 256 ))}
    ;;
  java)
    MEMORY=${MEMORY:-1024}  # Maven/JVM —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
    ;;
  go)
    MEMORY=${MEMORY:-256}
    ;;
esac

# === –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ –≤ –∫–æ–¥–µ (web-—Å–µ—Ä–≤–µ—Ä—ã) ===
PORT_FROM_CODE=$(grep -r -E "listen.*[ :]+[0-9]{4,5}" . --exclude-dir={.git,node_modules} -m1 | grep -oE '[0-9]{4,5}' | head -n1)

if [[ -n "$PORT_FROM_CODE" ]] && [[ "$PORT_FROM_CODE" -ge 1024 ]] && [[ "$PORT_FROM_CODE" -le 65535 ]]; then
  PORT=$PORT_FROM_CODE
  echo "üåê –ü–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ: $PORT"
fi

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (web –∏–ª–∏ cli) ===
IS_WEB_APP=0
if [[ -n "$HAS_PACKAGE_JSON" ]] && grep -q '"scripts".*["'\'']start["'\'']' "$HAS_PACKAGE_JSON"; then
  IS_WEB_APP=1
elif [[ -n "$HAS_REQUIREMENTS_TXT" ]] && grep -i -E "(flask|django|fastapi)" "$HAS_REQUIREMENTS_TXT" > /dev/null; then
  IS_WEB_APP=1
elif grep -r -l -E "http.Server|express|Flask|Django|gin" . --exclude-dir={.git,node_modules} | head -n1 > /dev/null; then
  IS_WEB_APP=1
fi

# === –®–∞–≥–∏ —Å–±–æ—Ä–∫–∏ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ) ===
get_build_steps() {
  local steps=""
  case $LANG in
    python)
      steps=$(cat << 'EOF'
      - apt-get update
      - apt-get install -y python3 python3-pip
      - pip3 install -r requirements.txt
      - python3 -m pytest tests/ || echo "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
EOF
)
      ;;

    node)
      steps=$(cat << 'EOF'
      - apt-get update
      - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      - apt-get install -y nodejs
      - npm ci
      - npm run build || echo "–°–±–æ—Ä–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
      - npm test || echo "–¢–µ—Å—Ç—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
EOF
)
      ;;

    java)
      steps=$(cat << 'EOF'
      - apt-get update
      - apt-get install -y openjdk-17-jdk maven
      - mvn clean package
EOF
)
      ;;

    go)
      steps=$(cat << 'EOF'
      - apt-get update
      - apt-get install -y golang
      - go mod download
      - go build -o app .
EOF
)
      ;;
  esac
  echo "$steps"
}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YAML ===
cat > "$OUTPUT" << EOF
# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω ===
# –ü—Ä–æ–µ–∫—Ç: $REPO
# –í–µ—Ç–∫–∞: $BRANCH
# –Ø–∑—ã–∫: $LANG
# –¢–∏–ø: $( [[ $IS_WEB_APP -eq 1 ]] && echo "–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" || echo "CLI/—Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å" )
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: RAM >= ${MEMORY}MB, Disk >= ${DISK}MB, Port: $PORT

stages:
  - build
  - test
  - deploy

variables:
  APP_LANG: "$LANG"
  REQUIRED_MEMORY_MB: "$MEMORY"
  REQUIRED_DISK_MB: "$DISK"
  EXPOSED_PORT: "$PORT"
  REPO_URL: "$REPO"
  TARGET_BRANCH: "$BRANCH"
  PROJECT_TYPE: "$( [[ $IS_WEB_APP -eq 1 ]] && echo "web" || echo "cli" )"

build_application:
  stage: build
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y git wget sudo curl
    - git clone --branch "\${TARGET_BRANCH}" "\${REPO_URL}" /app
    - cd /app
$(get_build_steps)

  script:
    - echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

  tags:
    - lang-$LANG
    - mem-${MEMORY}mb
    - disk-${DISK}mb
  rules:
    - if: \$CI_COMMIT_BRANCH == \$TARGET_BRANCH

test_application:
  stage: test
  image: ubuntu:22.04
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    - exit 0
  needs: ["build_application"]
  rules:
    - if: \$CI_COMMIT_BRANCH == \$TARGET_BRANCH

deploy_staging:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ staging..."
    - echo "–ü–æ—Ä—Ç: \${EXPOSED_PORT}"
    - echo "–¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \${PROJECT_TYPE}"
  environment: staging
  needs: ["test_application"]
  when: manual
  rules:
    - if: \$CI_COMMIT_BRANCH == \$TARGET_BRANCH

# –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ deploy_production —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
EOF

echo "‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $OUTPUT"
echo ""
echo "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
echo "   –Ø–∑—ã–∫: $LANG"
echo "   –ü–æ—Ä—Ç: $PORT"
echo "   –ü–∞–º—è—Ç—å: ${MEMORY}MB"
echo "   –î–∏—Å–∫: ${DISK}MB"
echo "   –¢–∏–ø: $( [[ $IS_WEB_APP -eq 1 ]] && echo "–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" || echo "CLI/—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å" )"